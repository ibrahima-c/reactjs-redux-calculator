{"version":3,"sources":["components/Screen.js","containers/Screen/index.js","constants/ButtonTypes.js","datas/buttons.js","constants/ActionTypes.js","components/ButtonItem.js","containers/ButtonItem/index.js","actions/index.js","components/ButtonPanel.js","components/ClearScreen.js","containers/ClearScreen/index.js","components/Error.js","containers/Error/index.js","components/Footer.js","components/App.js","reducers/expression.js","reducers/index.js","index.js"],"names":["Screen","content","className","connect","state","expression","screenContent","NUMERIC","OPERATOR","RESULT","buttons","value","buttonType","ADD_OR_EVAL_EXPRESSION","CLEAR_SCREEN","ButtonItem","props","addOrEvalExpression","type","onClick","dispatch","ownProps","console","log","types","ButtonPanel","map","ClearScreen","resetAll","e","Error","error","errorContent","Footer","App","initialState","dotForbidden","updateExpression","action","previousContent","includes","updatedContent","result","mexp","eval","message","rootReducer","combineReducers","store","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"gVASeA,MAPf,YAA2B,IAAVC,EAAS,EAATA,QACb,OACI,qBAAKC,UAAU,SAAf,SAAyBD,KCGlBE,eAJS,SAACC,GAAD,MAAY,CACnCH,QAASG,EAAMC,WAAWC,iBAGZH,CAEbH,GCTWO,EAAU,UACVC,EAAW,WACXC,EAAS,SCATC,EAAU,CACtB,CACCC,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYJ,GAEb,CACCG,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYJ,GAEb,CACCG,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WAAYJ,GAEb,CACCG,MAAO,IACPC,WAAYL,GAEb,CACCI,MAAO,IACPC,WDtDiB,OCwDlB,CACCD,MAAO,IACPC,WAAYH,GAEb,CACCE,MAAO,IACPC,WAAYJ,ICjEDK,G,MAAyB,0BACzBC,EAAe,e,MCWbC,MAVf,SAAoBC,GAAO,IAEhBC,EAAuBD,EAAvBC,oBAEP,OACI,wBAAQf,UAAU,aAAagB,KAAK,SAASC,QAAW,kBAAMF,KAA9D,SAAsFD,EAAML,SCIrFR,cACd,MAP0B,SAACiB,EAAUC,GAAX,MAAyB,CACnDJ,oBAAqB,WCJf,IAA6BN,EAAOC,EDKzCQ,GCLkCT,EDKLU,EAASV,MCLGC,EDKIS,EAAST,WCJvDU,QAAQC,IAAIZ,GACZW,QAAQC,IAAIX,GACN,CACNM,KAAMM,EACNb,QACGC,oBDGWT,CAGbY,GEMaU,MAhBf,WAEI,OACI,qBAAKvB,UAAU,cAAf,SACKQ,EAAQgB,KACG,gBAAGf,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAV,OACA,cAAC,EAAD,CAEID,MAAOA,EAAOC,WAAYA,GADrBD,EAAQ,IAAMC,S,YCDhCe,MARf,YAAiC,IAAXC,EAAU,EAAVA,SAElB,OACI,wBAAQ1B,UAAU,QAAQgB,KAAK,SAASC,QAAS,SAAAU,GAAC,OAAID,KAAtD,2BCOOzB,cACd,MAP0B,SAACiB,GAAD,MAAe,CACzCQ,SAAU,WACTR,EHI6B,CAC9BF,KAAMM,QGDQrB,CAGbwB,G,MCHaG,MAVf,YAAwB,IAARC,EAAO,EAAPA,MAENC,EAAeD,EAAQ,WAAaA,EAAQ,GAElD,OACI,qBAAK7B,UAAU,QAAf,SAAwB8B,KCAjB7B,eAJS,SAACC,GAAD,MAAY,CACnC2B,MAAO3B,EAAMC,WAAW0B,SAGV5B,CAEb2B,GCMaG,MAXf,WAEI,OACI,sBAAK/B,UAAU,SAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCOGgC,MAXf,WAEE,OACE,sBAAKhC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,8BCJAiC,EAAe,CACpB7B,cAAe,IACf8B,cAAc,EACdL,MAAO,IAkBR,SAASM,EAAiBjC,EAAOkC,GAE7B,IAAMC,EAA0C,MAAxBnC,EAAME,eAAyBF,EAAME,cAAckC,SAAS,KAAO,GAAKpC,EAAME,cAChGmC,EAAiBF,EAAkBD,EAAO3B,MAEhD,GAAG2B,EAAO1B,aAAeH,GAAU8B,EAC/B,IACI,IAAMG,EAASC,IAAKC,KAAKL,GACzB,MAAO,CACHjC,cAAegC,EAAO3B,MAAS,IAAM+B,EACrCN,cAAc,EACdL,MAAO,IAGf,MAAMF,GACF,OAAO,2BACAzB,GADP,IAEI2B,MAAOF,EAAEgB,eAGf,GAAGP,EAAO1B,aAAeH,IAEL,MAAjB6B,EAAO3B,QAAkBP,EAAMgC,gBACb,MAAjBE,EAAO3B,OAAkC,MAAjB2B,EAAO3B,OAAwC,KAApB4B,GAEjD,MblDG,QakDAD,EAAO1B,WACC,CACHN,cAAemC,EACfL,cAAc,EACdL,MAAO,IAELO,EAAO1B,aAAeJ,EACrB,CACHF,cAAemC,EACfL,cAAc,EACdL,MAAO,IAGJ,2BACA3B,GADP,IAEIE,cAAemC,EACfV,MAAO,KAM3B,OAAO3B,ECtEX,IAIe0C,EAJKC,YAAgB,CACnC1C,WDOc,WAAoD,IAA/BD,EAA8B,uDAAtB+B,EAAcG,EAAQ,uCACjE,OAAQA,EAAOpB,MACR,KAAKJ,EACV,MAAO,CACMR,cAAe,IACf8B,cAAc,EACdL,MAAO,IAEf,KAAKlB,EACD,OAAOwB,EAAiBjC,EAAOkC,GACnC,QACL,OAAOlC,MEjBJ4C,EAAQC,YACZC,EACAC,OAAOC,8BAAgCD,OAAOC,gCAEhDC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.c46a82d5.chunk.js","sourcesContent":["import '../styles/Screen.css'\r\n\r\nfunction Screen({content}){\r\n    return (\r\n        <div className=\"screen\">{content}</div>\r\n    )\r\n\r\n}\r\n\r\nexport default Screen","import { connect } from 'react-redux'\r\nimport Screen from '../../components/Screen'\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tcontent: state.expression.screenContent\r\n})\r\n\r\nexport default connect(\r\n\tmapStateToProps\r\n)(Screen)\r\n","export const NUMERIC = 'NUMERIC'\r\nexport const OPERATOR = 'OPERATOR'\r\nexport const RESULT = 'RESULT'\r\nexport const DOT = 'DOT'","import {NUMERIC, OPERATOR, DOT, RESULT} from '../constants/ButtonTypes'\r\n\r\nexport const buttons = [\r\n\t{\r\n\t\tvalue: '7',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '8',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '9',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '/',\r\n\t\tbuttonType: OPERATOR\r\n\t},\r\n\t{\r\n\t\tvalue: '4',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '5',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '6',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '*',\r\n\t\tbuttonType: OPERATOR\r\n\t},\r\n\t{\r\n\t\tvalue: '1',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '2',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '3',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '+',\r\n\t\tbuttonType: OPERATOR\r\n\t},\r\n\t{\r\n\t\tvalue: '0',\r\n\t\tbuttonType: NUMERIC\r\n\t},\r\n\t{\r\n\t\tvalue: '.',\r\n\t\tbuttonType: DOT\r\n\t},\r\n\t{\r\n\t\tvalue: '=',\r\n\t\tbuttonType: RESULT\r\n\t},\r\n\t{\r\n\t\tvalue: '-',\r\n\t\tbuttonType: OPERATOR\r\n\t}\r\n]\r\n","export const ADD_OR_EVAL_EXPRESSION = 'ADD_OR_EVAL_EXPRESSION'\r\nexport const CLEAR_SCREEN = 'CLEAR_SCREEN'\r\n","import '../styles/ButtonItem.css'\r\n\r\nfunction ButtonItem(props){\r\n\r\n    const {addOrEvalExpression} = props\r\n\r\n    return (\r\n        <button className=\"buttonItem\" type=\"button\" onClick = {() => addOrEvalExpression()}>{props.value}</button>\r\n    )\r\n\r\n}\r\n\r\nexport default ButtonItem","import { connect } from 'react-redux'\r\n\r\nimport { addOrEvalExpression } from '../../actions'\r\nimport ButtonItem from '../../components/ButtonItem'\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n\taddOrEvalExpression: () => {\r\n\t\tdispatch(addOrEvalExpression(ownProps.value, ownProps.buttonType))\r\n\t}\r\n})\r\n\r\nexport default connect(\r\n\tnull,\r\n\tmapDispatchToProps,\r\n)(ButtonItem)\r\n\r\n","import * as types from '../constants/ActionTypes'\r\n\r\nexport function addOrEvalExpression(value, buttonType) {\r\n\tconsole.log(value)\r\n\tconsole.log(buttonType)\r\nreturn {\r\n\ttype: types.ADD_OR_EVAL_EXPRESSION,\r\n\tvalue,\r\n    buttonType,\r\n}\r\n}\r\n\r\nexport const clearAll = () => ({\r\n\ttype: types.CLEAR_SCREEN,\r\n})","import { buttons } from '../datas/buttons'\r\nimport '../styles/ButtonPanel.css'\r\nimport ButtonItem from '../containers/ButtonItem'\r\n\r\nfunction ButtonPanel(){\r\n\r\n    return (\r\n        <div className=\"buttonPanel\">\r\n            {buttons.map(\r\n                        ({ value, buttonType }) =>\r\n                        <ButtonItem \r\n                            key={value + '-' + buttonType}\r\n                            value={value} buttonType={buttonType}/>\r\n\t\t\t\t\t) \r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ButtonPanel","import '../styles/ClearScreen.css'\r\n\r\nfunction ClearScreen({resetAll}){\r\n\r\n    return (\r\n        <button className=\"clear\" type=\"button\" onClick={e => resetAll()}>Clear screen</button>\r\n    )\r\n\r\n}\r\n\r\nexport default ClearScreen","import { connect } from 'react-redux'\r\n//import { bindActionCreators } from 'redux'\r\n\r\nimport { clearAll } from '../../actions'\r\nimport ClearScreen from '../../components/ClearScreen'\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tresetAll: () => {\r\n\t\tdispatch(clearAll())\r\n\t}\r\n})\r\n\r\nexport default connect(\r\n\tnull,\r\n\tmapDispatchToProps,\r\n)(ClearScreen)\r\n\r\n\r\n","import '../styles/Error.css'\r\n\r\nfunction Error({error}){\r\n\r\n    const errorContent = error ? 'Error : ' + error : ''\r\n\r\n    return (\r\n        <div className=\"error\">{errorContent}</div>\r\n    )\r\n\r\n}\r\n\r\nexport default Error","import { connect } from 'react-redux'\r\nimport Error from '../../components/Error'\r\n\r\nconst mapStateToProps = (state) => ({\r\n\terror: state.expression.error\r\n})\r\n\r\nexport default connect(\r\n\tmapStateToProps\r\n)(Error)\r\n\r\n","import '../styles/Footer.css'\r\nimport ClearScreen from '../containers/ClearScreen'\r\nimport Error from '../containers/Error'\r\n\r\nfunction Footer(){\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <ClearScreen/>\r\n            <Error/>   \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Footer","import '../styles/App.css';\nimport Screen from '../containers/Screen'\nimport ButtonPanel from './ButtonPanel'\nimport Footer from './Footer'\n\nfunction App() {\n\n  return (\n    <div className=\"box\">\n      <Screen/>\n      <ButtonPanel/>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App;\n","import {\r\n\tADD_OR_EVAL_EXPRESSION,\r\n\tCLEAR_SCREEN,\r\n} from '../constants/ActionTypes'\r\nimport {OPERATOR, DOT, RESULT} from '../constants/ButtonTypes'\r\nimport mexp from 'math-expression-evaluator'\r\n\r\nconst initialState = {\r\n\tscreenContent: '0',\r\n\tdotForbidden: false,\r\n\terror: '',\r\n}\r\n\r\nexport default function expression (state = initialState, action) {\r\n\tswitch (action.type) {\r\n        case CLEAR_SCREEN:\r\n\t\t\treturn {\r\n                screenContent: '0',\r\n                dotForbidden: false,\r\n                error: '',\r\n            }\r\n        case ADD_OR_EVAL_EXPRESSION:\r\n            return updateExpression(state, action)\r\n        default:        \r\n\t\t\treturn state\r\n    }\r\n}\r\n\r\nfunction updateExpression(state, action){\r\n    \r\n    const previousContent = state.screenContent === '0' || state.screenContent.includes('=') ? '' : state.screenContent;\r\n    const updatedContent = previousContent + action.value;\r\n\r\n    if(action.buttonType === RESULT && previousContent){\r\n        try{\r\n            const result = mexp.eval(previousContent);\r\n            return {\r\n                screenContent: action.value  + ' ' + result,\r\n                dotForbidden: false,\r\n                error: '',\r\n            }\r\n        }\r\n        catch(e){\r\n            return {\r\n                ...state,\r\n                error: e.message,\r\n            }\r\n        }\r\n    }else if(action.buttonType !== RESULT){\r\n        if(\r\n            (action.value !== '.' || !state.dotForbidden) &&\r\n            ((action.value !== '*' && action.value !== '/'  ) || previousContent !== '')\r\n            ){\r\n                if(action.buttonType === DOT){\r\n                    return {\r\n                        screenContent: updatedContent,\r\n                        dotForbidden: true,\r\n                        error: '',\r\n                    }\r\n                } else if(action.buttonType === OPERATOR){\r\n                    return {\r\n                        screenContent: updatedContent,\r\n                        dotForbidden: false,\r\n                        error: '',\r\n                    }\r\n                }else{\r\n                    return {\r\n                        ...state,\r\n                        screenContent: updatedContent,\r\n                        error: '',\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\n//import clearScreen from './clearScreen'\r\nimport expression from './expression'\r\n\r\nconst rootReducer = combineReducers({\r\n\texpression,\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers'\n\nconst store = createStore(\n  reducer, \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}